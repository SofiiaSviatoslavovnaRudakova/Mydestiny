import numpy as np
import matplotlib.pyplot as plt


# Пример входных данных
distance_matrix = np.array([[0, 5, 10, 15],
                            [5, 0, 8, 9],
                            [10, 8, 0, 6],
                            [15, 9, 6, 0]])

time_windows = np.array([[0, 10],
                         [5, 15],
                         [8, 12],
                         [10, 20]])

capacity = 15
start_point = 0
max_points = len(distance_matrix)

num_ants = 10
num_iterations = 100
pheromone_coefficient = 1
evaporation_rate = 0.5

demand = np.array([4, 3, 5, 2])




# Функция для вычисления длины маршрута
def calculate_route_length(distance_matrix, route):
    length = 0
    for i in range(len(route) - 1):
        length += distance_matrix[route[i]][route[i+1]]
    return length

# Функция для проверки временных окон
def check_time_windows(time_windows, route):
    for i in range(len(route)):
        if route[i] != 0:  # Исключаем стартовую точку
            if not time_windows[route[i]][0] <= time_windows[route[i-1]][1]:
                return False
    return True

# Функция для решения VRP с учетом временных окон
def solve_vrp_with_time_windows(distance_matrix, time_windows, capacity, start_point, max_points, num_ants, num_iterations, pheromone_coefficient, evaporation_rate):
    num_points = len(distance_matrix)

    # Инициализация матрицы феромонов
    pheromone_matrix = np.ones((num_points, num_points))

    # Инициализация лучшего маршрута и его длины
    best_route = []
    best_length = float('inf')

    # Цикл по итерациям
    for iteration in range(num_iterations):
        # Генерация маршрутов для каждого муравья
        ant_routes = []
        for ant in range(num_ants):
            current_point = start_point
            visited_points = [current_point]
            capacity_left = capacity

            # Генерация маршрута
            while len(visited_points) < max_points:
                # Выбор следующей точки с использованием формулы вероятности
                probabilities = []
                for point in range(num_points):
                    if point not in visited_points:
                        if capacity_left >= demand[point] and time_windows[point][0] <= time_windows[current_point][1]:
                            probabilities.append((pheromone_matrix[current_point][point] ** pheromone_coefficient) * ((1 / distance_matrix[current_point][point]) ** (1 - pheromone_coefficient)))
                        else:
                            probabilities.append(0)
                    else:
                        probabilities.append(0)
                probabilities = np.array(probabilities)
                probabilities /= probabilities.sum()
                next_point = np.random.choice(range(num_points), p=probabilities)

                # Обновление текущей точки, посещенных точек и оставшейся вместимости
                current_point = next_point
                visited_points.append(current_point)
                capacity_left -= demand[current_point]

            ant_routes.append(visited_points)

        # Проверка временных окон и вычисление длины маршрутов
        lengths = []
        for route in ant_routes:
            if check_time_windows(time_windows, route):
                length = calculate_route_length(distance_matrix, route)
                lengths.append(length)
            else:
                lengths.append(float('inf'))

        # Обновление лучшего маршрута и его длины
        min_length_index = np.argmin(lengths)
        if lengths[min_length_index] < best_length:
            best_route = ant_routes[min_length_index]
            best_length = lengths[min_length_index]

        # Обновление матрицы феромонов
        pheromone_matrix *= evaporation_rate
        for ant_route in ant_routes:
            for i in range(len(ant_route) - 1):
                pheromone_matrix[ant_route[i]][ant_route[i+1]] += 1 / lengths[min_length_index]

    return best_route, best_length


# Решение VRP сучетом временных окон
best_route, best_length = solve_vrp_with_time_windows(distance_matrix, time_windows, capacity, start_point, max_points, num_ants, num_iterations, pheromone_coefficient, evaporation_rate)

# Вывод результата
print("Best route:", best_route)
print("Best length:", best_length)

# Создание графика
x = [0] + [i for i in range(len(distance_matrix) + 1)]
y = [0] + best_route + [0]
plt.plot(x, y)
plt.xlabel('Point')
plt.ylabel('Visited Points')
plt.title('VRP with Time Windows')
plt.show()
