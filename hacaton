import numpy as np
# Матрица расстояний
distance_matrix = np.array([
    [0, 10, 20, 30],
    [10, 0, 15, 25],
    [20, 15, 0, 18],
    [30, 25, 18, 0]
])

# Временные окна
time_windows = [
    (0, 10),   # Временное окно для точки 0
    (5, 15),   # Временное окно для точки 1
    (8, 12),   # Временное окно для точки 2
    (10, 20)   # Временное окно для точки 3
]

# Вместимость транспортного средства
capacity = 100

# Начальная точка
start_point = 0

# Дополнительные ограничения (например, максимальное количество точек в маршруте)
max_points = 4

# Параметры муравьиного алгоритма
num_ants = 10
num_iterations = 100
pheromone_coefficient = 1.0
evaporation_rate = 0.5
#маршрут
route= [0, 1, 2, 3]
def calculate_route_length(route, distance_matrix):
    length = 0
    for i in range(len(route) - 1):
        length += distance_matrix[route[i]-1, route[i+1]-1]
    return length
route_length = calculate_route_length(route, distance_matrix)
#print(route_length)


def check_time_windows(route, time_windows):
    for i in range(1, len(route)-1):
        current_point = route[i]
        window = time_windows[current_point]
        if window[0] > current_point or window[1] < current_point:
            return False
    return True

#result = check_time_windows(route, time_windows)
#print(result)

def solve_vrp_with_time_windows(distance_matrix, time_windows, capacity, start_point, max_points, num_ants, num_iterations, pheromone_coefficient, evaporation_rate):
    num_nodes = distance_matrix.shape[0]
    pheromone_matrix = np.ones((num_nodes, num_nodes)) / num_nodes

    best_route = None
    best_length = float('inf')

    for iteration in range(num_iterations):
        routes = []
        lengths = []

        for ant in range(num_ants):
            route = [start_point]
            current_node = start_point
            visited_nodes = set([start_point])

            for _ in range(max_points - 1):
                probabilities = []
                for node in range(num_nodes):
                    if node not in visited_nodes:
                        pheromone = pheromone_matrix[current_node, node]
                        distance = distance_matrix[current_node, node]
                        time_window = time_windows[node]
                        if time_window[0] > route[-1] or time_window[1] < route[-1]:
                            probability = 0
                        else:
                            probability = pheromone**pheromone_coefficient / distance
                        probabilities.append(probability)
                    else:
                        probabilities.append(0)

                probabilities = np.array(probabilities, dtype=float)
                if np.sum(probabilities) == 0:
                    probabilities = np.ones(num_nodes) / num_nodes
                else:
                    probabilities /= np.sum(probabilities)

                next_node = np.random.choice(np.arange(num_nodes), p=probabilities)
                route.append(next_node)
                visited_nodes.add(next_node)
                current_node = next_node

            route.append(start_point)

            if check_time_windows(route, time_windows):
                length = calculate_route_length(route, distance_matrix)
                routes.append(route)
                lengths.append(length)

        if len(lengths) > 0:
            best_ant_index = np.argmin(lengths)
            best_ant_length = lengths[best_ant_index]
            best_ant_route = routes[best_ant_index]

            if best_ant_length < best_length:
                best_length = best_ant_length
                best_route = best_ant_route

            if best_ant_length != 0:
                pheromone_matrix *= evaporation_rate
                for i in range(len(best_ant_route) - 1):
                    pheromone_matrix[best_ant_route[i], best_ant_route[i+1]] += 1 / best_ant_length

    return best_route, best_length

best_route, best_length = solve_vrp_with_time_windows(distance_matrix, time_windows, capacity, start_point, max_points, num_ants, num_iterations, pheromone_coefficient, evaporation_rate)

print("Кратчайший путь:", best_route)
print("Длина кратчайшего пути:", best_length)

x = []
y = []
for node in best_route:
    x.append(node)
    y.append(time_windows[node][0])

plt.plot(x, y, 'o-')
plt.xlabel("Узлы")
plt.ylabel("Время")
plt.title("Кратчайший путь с учетом временных окон")
plt.show()
